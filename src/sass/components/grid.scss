.gls-grid {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
  padding: 0em;
  // 
  // margin-top: -1rem;
  // margin-bottom: -1rem;
  // margin-left: -1rem;
  // margin-right: -1rem;

  &.gls-relaxed {
    margin-left: -1.5rem;
    margin-right: -1.5rem;
  }

  &.gls-very-relaxed {
    margin-left: -2.5rem;
    margin-right: -2.5rem;
  }

  /* Preserve Rows Spacing on Consecutive Grids */
  & + .grid {
    margin-top: 1rem;
  }

  & > .gls-row {
    position: relative;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -webkit-box-pack: inherit;
        -ms-flex-pack: inherit;
            justify-content: inherit;
    -webkit-box-align: stretch;
        -ms-flex-align: stretch;
            align-items: stretch;
    width: 100% !important;
    padding: 0rem;
    // padding-top: 1rem;
    // padding-bottom: 1rem;
    margin: 0;
  }

  // Default width
  & > .gls-col,
  & > .gls-row > .gls-col {
    width: 100%;
  }

  &:not([class*=cols]) {
    .gls-row > .gls-col,
    .gls-col {
      display: flexbox;
      position: relative;
    }

    @for $i from 1 to 17 {
      @for $j from 1 to $i {
        .gls-row > .gls-col.gls-size__#{$j}-of-#{$i},
        .gls-col.gls-size__#{$j}-of-#{$i} {
          width: #{($j/$i)*100+'%'};
        }
      }
    }
  }

  @for $i from 1 to 16 {
    &:is(.gls-#{$i}-cols) > .gls-col,
    &:is(.gls-#{$i}-cols) > .gls-row > .gls-col {
      width: #{ (1/$i) *100 + '%' };
    }
  }

}
